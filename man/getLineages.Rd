% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AllGenerics.R, R/getLineages.R
\docType{methods}
\name{getLineages}
\alias{getLineages}
\alias{getLineages,matrix,character-method}
\alias{getLineages,matrix,ANY-method}
\alias{getLineages,SlingshotDataSet,ANY-method}
\alias{getLineages,data.frame,ANY-method}
\alias{getLineages,matrix,numeric-method}
\alias{getLineages,matrix,factor-method}
\alias{getLineages,matrix,matrix-method}
\title{Infer Lineage Structure from Clustered Samples}
\usage{
getLineages(reducedDim, clusterLabels, ...)

\S4method{getLineages}{matrix,character}(reducedDim, clusterLabels,
  start.clus = NULL, end.clus = NULL, dist.fun = NULL, omega = NULL)

\S4method{getLineages}{matrix,ANY}(reducedDim, clusterLabels,
  start.clus = NULL, end.clus = NULL, dist.fun = NULL, omega = NULL)

\S4method{getLineages}{SlingshotDataSet,ANY}(reducedDim,
  clusterLabels = clusterLabels(reducedDim), start.clus = NULL,
  end.clus = NULL, dist.fun = NULL, omega = NULL)

\S4method{getLineages}{data.frame,ANY}(reducedDim, clusterLabels,
  start.clus = NULL, end.clus = NULL, dist.fun = NULL, omega = NULL)

\S4method{getLineages}{matrix,numeric}(reducedDim, clusterLabels,
  start.clus = NULL, end.clus = NULL, dist.fun = NULL, omega = NULL)

\S4method{getLineages}{matrix,factor}(reducedDim, clusterLabels,
  start.clus = NULL, end.clus = NULL, dist.fun = NULL, omega = NULL)

\S4method{getLineages}{matrix,matrix}(reducedDim, clusterLabels,
  start.clus = NULL, end.clus = NULL, dist.fun = NULL, omega = NULL)
}
\arguments{
\item{reducedDim}{numeric, the \code{n} by \code{p} matrix of samples in a
reduced dimensionality space.}

\item{clusterLabels}{character, a vector of length \code{n} denoting cluster
labels, optionally including \code{-1}'s for "unclustered." If
\code{reducedDim} is a \code{SlingshotDataSet}, clustering infromation will
be taken from it. For soft clustering, this can also be an \code{n} by 
\code{K} matrix of cluster probabilities.}

\item{start.clus}{(optional) character, indicates the cluster(s) *from* which
lineages will be drawn.}

\item{end.clus}{(optional) character, indicates the cluster(s) which will be 
forced leaf nodes in their trees.}

\item{dist.fun}{(optional) function, method for calculating distances between
clusters. Must take two matrices as input, corresponding to points in 
reduced-dimensional space. If the minimum cluster size is larger than the 
number dimensions, the default is to use the joint covariance matrix to
find squared distance between cluster centers. If not, the default is to
use the diagonal of the joint covariance matrix.}

\item{omega}{(optional) numeric, this granularity parameter determines the
distance between every real cluster and the artificial cluster, OMEGA. It
is parameterized such that this distance is \code{omega / 2}, making
\code{omega} the maximum distance between two connected clusters. By
default, \code{omega = Inf}.}
}
\value{
An object of class \code{\link{SlingshotDataSet}} containing the 
  arguments provided to \code{getLineages} as well as the following new 
  elements: 
  \itemize{\item{\code{lineages}}{ a list of \code{L} items, where
  \code{L} is the number of lineages identified. Each lineage is represented
  by a character vector with the names of the clusters included in that
  lineage, in order.} 
  \item{\code{adjacency}}{ the inferred cluster adjacency matrix.} 
  \item{\code{slingParams$start.given},\code{slingParams$end.given}}{
  logical values indicating whether the starting and ending clusters were 
  specified a priori.} 
  \item{\code{slingParams$dist}}{ the pairwise
  cluster distance matrix.}}
}
\description{
Given a reduced-dimension data matrix \code{n} by \code{p} and a
  vector of cluster identities (potentially including -1's for
  "unclustered"), this function infers a forest structure on the clusters and
  returns paths through the forest that can be interpreted as lineages.
}
\details{
The \code{adjacency} matrix is learned by fitting a (possibly
  constrained) minimum-spanning tree on the clusters and the artificial 
  cluster, OMEGA, which is a fixed distance away from every real cluster.
  This effectively limits the maximum branch length in the MST to twice the
  chosen distance, meaning that the output may contain multiple trees.

Once the \code{adjacency} is known, lineages are identified in
  any tree with at least two clusters. For a given tree, if there is an
  annotated starting cluster, every possible path out of a starting cluster
  and ending in a leaf that isn't another starting cluster will be returned.
  If no starting cluster is annotated, every leaf will be considered as a
  potential starting cluster and whichever configuration produces the longest
  average lineage length (in terms of number of clusters included) will be
  returned.
}
\examples{
data("slingshotExample")
sds <- getLineages(rd, cl, start.clus = '1')

plot(rd, col = cl, asp = 1)
lines(sds, type = 'l', lwd = 3)

}
